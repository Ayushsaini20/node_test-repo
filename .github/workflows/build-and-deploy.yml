# name: Build and Deploy to JFrog

# on:
#   workflow_dispatch:
#     inputs:
#       repo_url:
#         description: 'GitHub Repository (format: owner/repo-name)'
#         required: true
#       jfrog_url:
#         description: 'JFrog Artifactory URL'
#         required: true

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Extract Repository Name
#         run: |
#           echo "Original repo_url: ${{ github.event.inputs.repo_url }}"
#           REPO_NAME=${{ github.event.inputs.repo_url }}
#           echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

#       - name: Checkout Target Repo
#         uses: actions/checkout@v4
#         with:
#           repository: ${{ env.REPO_NAME }}
#           ref: main  # Change to your actual branch
#           fetch-depth: 0
#           token: ${{ secrets.GH_TOKEN }}

#       - name: Check if npm is installed
#         id: check_npm
#         run: |
#           if ! command -v npm &> /dev/null; then
#             echo "npm not found. Installing..."
#             sudo apt update && sudo apt install -y npm
#           else
#             echo "npm is already installed."
#           fi

#       - name: Check if package.json exists
#         id: check_package
#         run: |
#           if [ -f package.json ]; then
#             echo "package.json found."
#             echo "PACKAGE_JSON_EXISTS=true" >> $GITHUB_ENV
#           else
#             echo "package.json is missing. Initializing new Node.js project..."
#             npm init -y
#             echo "PACKAGE_JSON_EXISTS=false" >> $GITHUB_ENV
#           fi

#       - name: Check for package-lock.json
#         id: check_lockfile
#         run: |
#           if [ -f package-lock.json ]; then
#             echo "Lock file exists."
#             echo "LOCK_FILE_EXISTS=true" >> $GITHUB_ENV
#           else
#             echo "Lock file missing."
#             echo "LOCK_FILE_EXISTS=false" >> $GITHUB_ENV
#           fi

#       - name: Install Default Dependencies (if package.json was created)
#         if: env.PACKAGE_JSON_EXISTS == 'false'
#         run: |
#           echo "Installing default dependencies..."
#           npm install express  # You can add more default dependencies if needed

#       - name: Generate package-lock.json (if missing)
#         if: env.LOCK_FILE_EXISTS == 'false'
#         run: |
#           echo "Generating package-lock.json..."
#           npm install --package-lock-only

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 18

#       - name: Install Dependencies
#         run: npm ci  # Uses package-lock.json

#       - name: Run Unit Tests
#         run: npm test || echo "No tests found, skipping..."

#       - name: Build Application
#         run: npm run build || echo "No build script found, skipping..."

#       - name: Upload Build Artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: build-artifact
#           path: dist/
#           retention-days: 1
# # ---
#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Extract Repository Name
#         run: |
#           REPO_NAME=$(echo "${{ github.event.inputs.repo_url }}" | sed 's|github.com/||')
#           echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

#       - name: Checkout Target Repo
#         uses: actions/checkout@v4
#         with:
#           repository: ${{ env.REPO_NAME }}
#           token: ${{ secrets.GH_TOKEN }}

#       - name: Download Build Artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: build-artifact
#           path: dist/

#       - name: Upload Artifact to JFrog (Hardcoded Credentials)
#         run: |
#           echo "Uploading artifact to JFrog..."
#           FILE_PATH="dist/*"
#           TARGET_PATH="artifacts-generic-local/"

#           curl -uayush.sai2025@gmail.com:cmVmdGtuOjAxOjE3NzA5ODAzNzM6MU15Rld2alhvckdPTGR4UU85WDF4eWxwUjdm \
#                -T $FILE_PATH "https://ayushsaini12341.jfrog.io/artifactory/$TARGET_PATH"


name: Build and Deploy to JFrog

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'GitHub Repository (format: owner/repo-name)'
        required: true
      jfrog_url:
        description: 'JFrog Artifactory URL'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Repository Name
        run: |
          echo "Original repo_url: ${{ github.event.inputs.repo_url }}"
          REPO_NAME=$(echo "${{ github.event.inputs.repo_url }}" | sed 's|github.com/||')
          echo "Stripped repo_url: $REPO_NAME"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Checkout Target Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_NAME }}  # Uses the cleaned-up repository format
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm test

      - name: Build Application
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Extract Repository Name
        run: |
          REPO_NAME=$(echo "${{ github.event.inputs.repo_url }}" | sed 's|github.com/||')
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Checkout Target Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_NAME }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/

      - name: Upload Artifact to JFrog (Hardcoded Credentials)
        run: |
          echo "Uploading artifact to JFrog..."
          FILE_PATH="dist/*"
          TARGET_PATH="artifacts-generic-local/"

          curl -uayush.sai2025@gmail.com:cmVmdGtuOjAxOjE3NzA5ODAzNzM6MU15Rld2alhvckdPTGR4UU85WDF4eWxwUjdm \
               -T $FILE_PATH "https://ayushsaini12341.jfrog.io/artifactory/$TARGET_PATH"
